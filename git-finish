#!/usr/bin/env python

VERSION = '0.0.1'

import subprocess
import argparse
from time import sleep

def run_command(cmd):
    try:
        proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
        while proc.returncode == None:
            sleep(0.01)
            out = proc.stdout.read(1)
            while out != '':
                sys.stdout.write(out)
                sys.stdout.flush()
                out = proc.stdout.read(1)
            err = proc.stderr.read(1)
            while err != '':
                sys.stderr.write(err)
                sys.stderr.flush()
                err = proc.stderr.read(1)
            proc.poll()

        proc.stdout.close()
        proc.stderr.close()
        if proc.returncode != 0:
            exit(proc.returncode)
    except:
        exit(1)


if __name__ == "__main__":
    usage = 'git finish [options] <branch> [<base>]'
    description = """\
    Before calling this command, <branch> must first be rebased onto
    <base> (defaults to master if not specified).

    This command finishes a branch by carrying out the following tasks:

    1. Backup <branch> to `refs/archive/<branch>`.
    2. Coalesce the commits between <base> and <branch> by calling
       git-coalesce.
    3. Merge <branch> with <base>. By default fast-forwarding is used.
       If --no-ff is specified, the flag --no-commit is used when doing
       the merge. You will have to commit manually.
    4. If fast-forwarding is used in step 3, also delete <branch>.
       Otherwise, step 3 will stop before committing, and you need to
       manually commit the merge and delete <branch>.
"""
    parser = argparse.ArgumentParser(usage=usage, description=description,
                                     formatter_class=argparse.RawDescriptionHelpFormatter)

    noff_help = "Forbid fast-forwarding when merging"
    parser.add_argument('--no-ff', action='store_true', help=noff_help)
    parser.add_argument('-v', '--version', action='version', version="%(prog)s version " + VERSION)
    ns = parser.parse_args()
    print ns
    exit(0)

    env_str = 'GIT_SEQUENCE_EDITOR="%s --seqedit-%s" GIT_EDITOR="%s --comedit-%s"' % (__file__, rand, __file__, rand)
    cmd_str = '%s git rebase -i %s' % (env_str, ' '.join(remaining))
    run_command(cmd_str)
