#!/usr/bin/env python

VERSION = '0.0.1'

import sys
import subprocess
import argparse
from time import sleep

def run_command(cmd):
    try:
        proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
        while proc.returncode == None:
            sleep(0.01)
            out = proc.stdout.read(1)
            while out != '':
                sys.stdout.write(out)
                sys.stdout.flush()
                out = proc.stdout.read(1)
            err = proc.stderr.read(1)
            while err != '':
                sys.stderr.write(err)
                sys.stderr.flush()
                err = proc.stderr.read(1)
            proc.poll()

        proc.stdout.close()
        proc.stderr.close()
        if proc.returncode != 0:
            exit(proc.returncode)
    except:
        exit(1)


if __name__ == "__main__":
    usage = 'git finish [options] <branch> [<base>]'
    description = """\
    Before using this command, <branch> must first be rebased onto <base>.

    This command finishes a branch by carrying out the following tasks:

    1. Backup <branch> to `refs/archive/<branch>`.
    2. Coalesce the commits between <base> and <branch> by calling
       git-coalesce.
    3. Merge <branch> to <base>. By default fast-forwarding is used.
       If --no-ff is specified, the flag --no-commit is also used
       when doing the merge. You will have to commit manually.
    4. If fast-forwarding is used in step 3, also delete <branch>.
       Otherwise, step 3 will stop before committing, and you need
       to manually commit the merge and delete <branch>.
"""
    parser = argparse.ArgumentParser(usage=usage, description=description,
                                     formatter_class=argparse.RawDescriptionHelpFormatter)

    parser.add_argument('branch', metavar='<branch>', help='the branch to finish')
    parser.add_argument('base', metavar='[<base>]', nargs='?', help='the upstream branch to merge to. Defaults to `master` if omitted')
    noff_help = "forbid fast-forwarding when merging"
    parser.add_argument('--no-ff', action='store_true', help=noff_help)
    parser.add_argument('-v', '--version', action='version', version="%(prog)s version " + VERSION)
    ns = parser.parse_args()

    if ns.base == None:
        ns.base = 'master'

    # Record progress for restoring on error
    step = 0

    try:
        # Verify that <branch> is indeed the name of a branch
        try:
            subprocess.check_output('git show-ref --verify refs/heads/%s' % ns.branch, shell=True)
        except subprocess.CalledProcessError:
            print 'Error: `%s` is not a branch name' % ns.branch
            exit(1)

        # Verify that <base> is an ancester of <branch>
        merge_base = subprocess.check_output('git merge-base %s %s' % (ns.branch, ns.base), shell=True)
        base = subprocess.check_output('git rev-parse --verify %s' % ns.base, shell=True)
        if merge_base.strip() != base.strip():
            print 'Error: `%s` is not an ancestor of `%s`' % (ns.base, ns.branch)
            print 'Rebase <branch> onto <base> before using this command!'
            exit(1)

        # Step 1: backup <branch> to `refs/archive/<branch>`
        # First check `refs/archive/<branch>` doesn't already exist or holds the
        # same value as <branch>
        try:
            result = subprocess.check_output('git show-ref --verify refs/archive/%s' % ns.branch,
                                             stderr=subprocess.PIPE, shell=True)
        except subprocess.CalledProcessError:
            # Ref not exsited, that's great
            pass
        else:
            # It's also fine if `refs/archive/<branch>` already points to <branch> itself
            archive_id = result.strip().split(' ')[0]
            branch_id = subprocess.check_output('git rev-parse --verify %s' % ns.branch, shell=True)
            if branch_id.strip() != archive_id:
                print 'Error: `refs/archive/%s` already exists!' % ns.branch
                exit(1)

        # Finally, do the backup
        sys.stdout.write(subprocess.check_output('git update-ref refs/archive/%s %s' % (ns.branch, ns.branch), shell=True))
        step = 1

        # Step 2: coalesce commits between <base> and <branch>
        sys.stdout.write(subprocess.check_output('git checkout %s' % ns.branch, shell=True))
        run_command('git coalesce --list 15 %s' % ns.base)
        step = 2

        # Step 3: merge <branch> to <base>
        sys.stdout.write(subprocess.check_output('git checkout %s' % ns.base, shell=True))
        if ns.no_ff:
            run_command('git merge --no-ff --no-commit %s' % ns.branch)
            step = 3
            print 'Done: you need to manually commit the merge and delete branch `%s`' % ns.branch
        else:
            run_command('git merge --ff-only %s' % ns.branch)
            step = 3

            # Step 4: delete <branch>
            sys.stdout.write(subprocess.check_output('git branch -d %s' % ns.branch, shell=True))
            step = 4
            print 'All done.'

    except subprocess.CalledProcessError, e:
        print e.output

        try:
            # Try to restore to the state before running this command
            if step == 4:
                # You gotta be kidding me, this isn't possible
                pass
            elif step == 3:
                # Umm, only failed to delete the branch, nothing serious
                print '\nError encountered in step 4: failed to delete branch `%s`' % ns.branch
            elif step == 2:
                # We need to restore <branch> to previous state and delete refs/archive/<branch>
                print '\nError encountered in step 3, trying to restore...'
                sys.stdout.write(subprocess.check_output('git branch -f %s refs/archive/%s' % (ns.branch, ns.branch), shell=True))
                sys.stdout.write(subprocess.check_output('git update-ref -d refs/archive/%s' % ns.branch, shell=True))
                print 'Successfully restored branch `%s` to previous state and deleted `refs/archive/%s`' % (ns.branch, ns.branch)
            elif step == 1:
                # We need to delete refs/archive/<branch>
                print '\nError encountered in step 2, trying to restore...'
                sys.stdout.write(subprocess.check_output('git update-ref -d refs/archive/%s' % ns.branch, shell=True))
                print 'Successfully deleted `refs/archive/%s`' % ns.branch
        except subprocess.CalledProcessError, e2:
            print e2.output
            exit(e2.returncode)

        exit(e.returncode)
